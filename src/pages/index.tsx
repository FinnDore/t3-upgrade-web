import { Checkbox } from "@/components/ui/Checkbox";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/Select";
import {
  getT3VersionsGroupedByMajor,
  type VersionsGroupedByMajor,
} from "@/lib/utils";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useMemo, useState } from "react";

const Home: NextPage = () => {
  const router = useRouter();
  const [versionOptions, setVersionOptions] = useState<VersionsGroupedByMajor>(
    {}
  );
  const [currentVersion, setCurrentVersion] = useState<string | null>(null);
  const [upgradeVersion, setUpgradeVersion] = useState<string | null>(null);
  const [features, setFeatures] = useState({
    nextAuth: false,
    prisma: false,
    trpc: false,
    tailwind: false,
  });

  const upgradeVersionOptions = useMemo(() => {
    if (!currentVersion) return versionOptions;
    const [major, minor, patch] = currentVersion.split(".");
    const filteredVersions = Object.keys(versionOptions)
      .filter((majorVersion) => Number(majorVersion) >= Number(major))
      .reduce((acc, majorVersion) => {
        if (Number(majorVersion) === Number(major)) {
          const initialValues = versionOptions[majorVersion];
          const filterValue = (version: string) => {
            const [, versionMinor, versionPatch] = version.split(".");
            if (Number(versionMinor) > Number(minor)) return true;
            if (
              Number(versionMinor) === Number(minor) &&
              Number(versionPatch) > Number(patch)
            )
              return true;
            return false;
          };
          acc[majorVersion] = initialValues?.filter(filterValue) || [];
        } else {
          acc[majorVersion] = versionOptions[majorVersion] || [];
        }
        return acc;
      }, {} as VersionsGroupedByMajor);

    // if only one major version is available and it has no versions, return empty object
    if (Object.keys(filteredVersions).length === 1) {
      const [majorVersion] = Object.keys(filteredVersions);
      if (!majorVersion) return {};
      if (!filteredVersions[majorVersion]?.length) return {};
    }
    return filteredVersions;
  }, [currentVersion, versionOptions]);

  useEffect(() => {
    const loadT3Versions = async () => {
      const t3Versions = await getT3VersionsGroupedByMajor();
      setVersionOptions(t3Versions);
    };

    void loadT3Versions();
  }, []);

  const renderSelectContent = (options: VersionsGroupedByMajor) => {
    if (!Object.keys(options).length) return null;
    return Object.keys(options)
      .filter((majorVersion) => options[majorVersion]?.length)
      .map((majorVersion) => (
        <SelectGroup key={majorVersion}>
          <SelectLabel>{`${majorVersion}.x`}</SelectLabel>
          {options[majorVersion]?.map((version) => (
            <SelectItem key={version} value={version}>
              {version}
            </SelectItem>
          ))}
        </SelectGroup>
      ));
  };

  const noUpgradeAvailable = !Object.keys(upgradeVersionOptions).length;

  const goToDiff = () => {
    if (!currentVersion || !upgradeVersion) return;
    const activeFeatures = Object.keys(features).filter(
      (feature) => features[feature as keyof typeof features]
    );
    const featuresString = activeFeatures.join("-");

    const url = `/diff/${currentVersion}..${upgradeVersion}${
      featuresString ? `-${featuresString}` : ""
    }`;

    void router.push(url);
  };

  return (
    <>
      <Head>
        <title>Upgrade T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex grow flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Upgrade <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="flex items-center gap-6">
            <div>
              <p className="text-xl text-white">Current version:</p>
              <Select onValueChange={(value) => setCurrentVersion(value)}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Select version" />
                </SelectTrigger>
                <SelectContent>
                  {renderSelectContent(versionOptions)}
                </SelectContent>
              </Select>
            </div>

            <div>
              <p className="text-xl text-white">Upgrade to:</p>

              <Select
                onValueChange={(value) => setUpgradeVersion(value)}
                disabled={!!noUpgradeAvailable}
              >
                <SelectTrigger className="w-[180px]">
                  <SelectValue
                    placeholder={
                      noUpgradeAvailable
                        ? "No upgrade available"
                        : "Select version"
                    }
                  />
                </SelectTrigger>
                <SelectContent>
                  {renderSelectContent(upgradeVersionOptions)}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="flex items-center gap-6 text-white">
            {Object.keys(features).map((feature) => (
              <div className="flex items-center space-x-4" key={feature}>
                <Checkbox
                  id={feature}
                  checked={features[feature as keyof typeof features]}
                  onCheckedChange={(value) =>
                    value !== "indeterminate"
                      ? setFeatures((prev) => ({
                          ...prev,
                          [feature]: value,
                        }))
                      : null
                  }
                />
                <label
                  htmlFor={feature}
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  {feature}
                </label>
              </div>
            ))}
          </div>

          <button
            className="rounded-md bg-[hsl(280,100%,70%)] px-4 py-2 text-lg font-medium text-white disabled:cursor-not-allowed disabled:opacity-70"
            disabled={!currentVersion || !upgradeVersion}
            onClick={() => goToDiff()}
          >
            Upgrade
          </button>
        </div>
        <div className="pb-5">
          <a href="https://github.com/andreifilip123/t3-upgrade-web">
            <Image
              src="/github-mark-white.svg"
              alt="Github Logo"
              width={32}
              height={32}
            />
          </a>
        </div>
      </main>
    </>
  );
};

export default Home;
